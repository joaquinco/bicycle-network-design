# Notas de interés

Notas que caen fuera del documento latex.

## 21-07-27

He estado comparando los cuatro modelos .mod contra las caracteristicas de una solucion que describi en el documento. Me pasa que si uso cbc, los modelos v3 y v4 dan errores, pero no pasa con glpsol. Los modelos v3 y v4 tienen la implementacion de f_k v3.

Habria que intentar arreglar CBC porque anda mas rapido y soporta multithread para branch and cut.

Al usar glpsol, correr varias instancias aleatorias de Sioux Falls, el v4 da valores objetivos differente al resto, lo cual me resulta extraño.

Luego de analizar los datos de las 2000 ejecuciones con glpsol en el cluster, dado que el v4 es el que mas normalmente da distinto (distinto valor de demanda transferida total), lo exclui y mire las veces en que el v3 da distinto al default y v2 (estos dos siempre dan igual), lo que me pasa es que al correr esos casos de manera local me dan los tres lo mismo (default, v2 y v3). Tampoco pude reproducir corriendolo manualmente en el cluster, por lo que agregue mas datos a los logs, baje glpsol en su version 4.65 (antes 4.52.1) y ejecute de nuevo la comparacion.

## 21-08-03

Ver si hay alguna forma de exportar .mod y .dat a algun otro formato (me suena que glpk tiene algo) y si cbc soporta alguna de esas formas. Esto con el fin de mejorar el desempeño, porque glpsol es mucho mas lento que cbc.

## 21-08-09

Vale la pena averiguar por que el single_level_v4 anduvo mal? Teoricamente, si f cumple con la definicion deberia dar el valor de demanda transferida iguales a los otros modelos.

## 21-08-14

Despues de analizar un poco las versiones v3 y v4 (principalmente la ultima que es la que mas difiere), me doy cuenta que la formulación da mal porque al dividir waux[k, j] + wsink[k, j] = w[k] y utilizar un valor muy alto de INFINITE para limitar waux y wsink, puede causar que aunque uno de ellos deba estar en 0, su valor pueda ser un 0.000X > 0. Esto pasa con glpsol en algunas instancias, el tipo de validacion que falla es de "demand transfered". Utilizando un valor de INFINITE mas bajo (tipo 99) el v4 me dio correcto para la instancia que estaba analizando. Esto no quita que el v3 y v4 sigan siendo mucho mas lentos que v1 y v2. Con cbc resuelve correctamente la instancia con v4. En la nota del 21/07 dice que con cbc algunas instancias v3 y v4 dan errores, pero lamentablemente no anote que tipo de error da, porque es sabido que v2 y v4 dan errores de budget (o path not optimized) en alguno casos.

Importante: averiguar cual era el error por el que deje de usar cbc.

## 21-08-17

Ejecute 1000 instancias aleatorias con cbc, los modelos v1 y v3 no dieron ningun error, menos una instancia que estaba mal formada (dos breakpoints casi consecutivos, todas dieron error de "demand transfered" aca). Los modelos v2 y v4 al no tener las variables de holgura r no optimizan del todo los caminos entonces dan los errores de budget (o path not optimized).

Iba a terminar esta parte hoy, pero descubri que no estoy guardando todas las instancias (solo los que obtienen soluciones erroneas), entonces al investigar los que dieron diferencia en la cantidad de demanda transferida local no estaban.

Nota: todavia no se que es lo que andaba mal de cbc hace un tiempo.

## 21-08-18

Ejecute 1000 instancias de nuevo (comparison 6), guardando todas las solcuiones y todos las instancias.
Detecte un caso en que los modelos con variables de resto dan una solucion incorrecta, y es cuando para un par origen destino, la demanda transferida es chica (comparable al valor de la variable de resto). En este caso el modelo con variables de resto puede dar soluciones incorrectas. Sabiendo esto, lo ideal seria tener dos modelos, ejecutar el v2 optimizando la demanda transferida y definir el rango del costo del camino mas corto de cada par origen destino. Luego fijando esto, correr otro problema que optimice la construccion de ciclovias. Otra solucion es, multiplicar las variables de resto en la funcion objetivo por una constante chica de manera que sean insignificantes respecto a los valores de demanda transferida.

Las instancias problematicas fueron:
651: hay dos breakpoints que estan muy pegados, todas las versiones dieron error.
726: problemas al usar variables de resto y demanda transferida muy baja (o de magnitud comparable).
844: el v2 y v4 dieron demanda transferida incorrecta para un par od en el cluster pero local anduvo bien.
910: el v2 dio cantidad diferente de demanda transferida en el cluster pero no al ejecutarlo local.

651 y 844 los diagnostico a problema numerico.
726 es un problema ya identificado mas arriba.
910: caso sin resolver. Para el od_0 el v2 devolvio un j = 1, mientras que el v3 (por ej) fue j = 2. Ambas versiones encontraron un camino mas corto de 17.28, dado que los puntos de quiebre mas cercanos son: `1  17.525012726598575  2  17.408854811461072  3  17.273638070345033` se deduce que el valor correcto de j es 2, por lo tanto parece haber habido un error en la ejecucion en el cluster. Nótese que subsecuentes ejecuciones en el cluster dieron el resultado correcto, por lo tanto se cataloga como irreproducible deterministicamente.

## 21-09-01

Encontre un error en la funcion calculate_construction_cost (devolvia el doble de lo que tenia que dar para infras mayor a 0). Deberia correr las 1000 de nuevo.

(ya lo agregué) IMPORTANTE: recien me doy cuenta, que hay que detallar algunas consideraciones respecto a las infrastructuras de bicicleta:
- Considero infrastructuras dirigidas: es decir que puedo construir en una sola direccion.
- Si construyo en dos direcciones no hay consideracion respecto a la reduccion en costo de construir la segunda (o dicho de otra manera, las dos juntas).
- Se puede construir una infrastructura en un sentido y otra en otro.

## 21-09-03

Notas de la lectura del paper The Bicycle Network Improvement Problem: Optimization Algorithms and A Case Study in Atlanta:

- Me falta agregar una seccion de motivacion del problema, trabajo previo y una buena introduccion de a poquito a como se realizo el trabajo. Tambien plantear si aplica, el aporte del trabajo, o la diferencia entre el problema/solucion a otros trabajos similares.
- En este trabajo se consideran arcos unsafe 
- La funcion de demanda transferida se basa en un parametro L (para cada od) que actua como threashold a partir del cual se considera que toda la demanda se transfiere. Ademas se agrega la restricción de que el camino tiene que ser "safe", concepto que yo no manejo en mi problema.
- Analizar si puede encontrarse alguna equivalencia entre los modelos a menos del concepto de safe/unsafe. Me parece que usando una funcion de penalidad como D^k_tot - f_k(w_k) donde D^k_tot es la demanda total del par k, podria asimilarse bastante.
- Hay cierta similitud en el modelado de una funcion f que en el caso de este paper lo hacen como funciones lineales de a pedazos, o peasewise linear funtions.

## 21-09-7

Estuve revisando el documento. Me di cuenta que la formulación de un nivel es como la formulación multiobjetivo de Pareto pero ponderando el primer nivel con 1 y el segundo con 0. Esto me lleva a pensar que las variables de resto que puse fueron al pedo y pude haberlo hecho con la variable w_k directamente, posiblemnete ponderada por un factor chico en vez de cero.

Deje ejecutando en el cluster 1000 instancias random de sioux-falls ahora con dos formulaciones mas, seria con multiobjetivo de Pareto con ponderacion 1 y 1 (cada funcion objetivo) y las dos versiones de la formulacion de f_k.
